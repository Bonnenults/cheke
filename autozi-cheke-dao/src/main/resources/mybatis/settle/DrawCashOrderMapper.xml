<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.autozi.cheke.settle.mapper.DrawCashOrderMapper">
<cache eviction="LRU" type="org.mybatis.caches.memcached.MemcachedCache"/>
<resultMap id="DrawCashOrderMap" type="DrawCashOrder">
	<result column="ID" jdbcType="DECIMAL" property="id"/>
	<result column="VERSION" jdbcType="DECIMAL" property="version"/>
	<result column="CODE" jdbcType="VARCHAR" property="code"/>
	<result column="USER_ID" jdbcType="DECIMAL" property="userId"/>
	<result column="ACCOUNT_MONEY" jdbcType="DECIMAL" property="accountMoney"/>
	<result column="SLOTTING_FEE" jdbcType="DECIMAL" property="slottingFee"/>
	<result column="MONEY" jdbcType="DECIMAL" property="money"/>
	<result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime"/>
	<result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime"/>
	<result column="PAY_TIME" jdbcType="TIMESTAMP" property="payTime"/>
	<result column="STATUS" jdbcType="DECIMAL" property="status"/>
	<result column="NOTE" jdbcType="VARCHAR" property="note"/>
	<result column="BANK_CARD_ID" jdbcType="DECIMAL" property="bankCardId"/>
</resultMap>
<sql id="Base_Column_List">
	ID,VERSION,CODE,USER_ID,ACCOUNT_MONEY,SLOTTING_FEE,MONEY,CREATE_TIME,UPDATE_TIME,PAY_TIME,STATUS,NOTE,BANK_CARD_ID
</sql>
<sql id="pdco_Base_Column_List">
	pdco.ID,pdco.VERSION,pdco.CODE,pdco.USER_ID,pdco.ACCOUNT_MONEY,pdco.SLOTTING_FEE,pdco.MONEY,pdco.CREATE_TIME,pdco.UPDATE_TIME,pdco.PAY_TIME,pdco.STATUS,pdco.NOTE,pdco.BANK_CARD_ID
</sql>
<select id="get" parameterType="long" resultMap="DrawCashOrderMap">
	select
		<include refid="Base_Column_List"/>
	from pay_draw_cash_order pdco
	where ID = #{id,jdbcType=DECIMAL}
</select>
<delete id="delete" parameterType="long">
	delete
	from pay_draw_cash_order
	where ID = #{id,jdbcType=DECIMAL}
</delete>
<insert id="insert" parameterType="DrawCashOrder">
	insert into pay_draw_cash_order(
		<include refid="Base_Column_List"/>
	) values (
	#{id,jdbcType=DECIMAL},
	#{version,jdbcType=DECIMAL},
	#{code,jdbcType=VARCHAR},
	#{userId,jdbcType=DECIMAL},
	#{accountMoney,jdbcType=DECIMAL},
	#{slottingFee,jdbcType=DECIMAL},
	#{money,jdbcType=DECIMAL},
	#{createTime,jdbcType=TIMESTAMP},
	#{updateTime,jdbcType=TIMESTAMP},
	#{payTime,jdbcType=TIMESTAMP},
	#{status,jdbcType=DECIMAL},
	#{note,jdbcType=VARCHAR},
	#{bankCardId,jdbcType=DECIMAL}
	)
</insert>
<update id="update" parameterType="DrawCashOrder">
	update pay_draw_cash_order pdco
	<set>
		VERSION = VERSION + 1
		<if test="code != null">
		,CODE = #{code,jdbcType=VARCHAR}
		</if>
		<if test="userId != null">
		,USER_ID = #{userId,jdbcType=DECIMAL}
		</if>
		<if test="accountMoney != null">
		,ACCOUNT_MONEY = #{accountMoney,jdbcType=DECIMAL}
		</if>
		<if test="slottingFee != null">
		,SLOTTING_FEE = #{slottingFee,jdbcType=DECIMAL}
		</if>
		<if test="money != null">
		,MONEY = #{money,jdbcType=DECIMAL}
		</if>
		<if test="createTime != null">
		,CREATE_TIME = #{createTime,jdbcType=TIMESTAMP}
		</if>
		<if test="updateTime != null">
		,UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP}
		</if>
		<if test="payTime != null">
		,PAY_TIME = #{payTime,jdbcType=TIMESTAMP}
		</if>
		<if test="status != null">
		,STATUS = #{status,jdbcType=DECIMAL}
		</if>
		<if test="note != null">
		,NOTE = #{note,jdbcType=VARCHAR}
		</if>
		<if test="bankCardId != null">
			,BANK_CARD_ID = #{bankCardId,jdbcType=DECIMAL}
		</if>
	</set>
	where ID = #{id,jdbcType=DECIMAL} and version = #{version,jdbcType=DECIMAL}
</update>
<select id="findListForExample" parameterType="DrawCashOrder" resultMap="DrawCashOrderMap">
	select
	<include refid="pdco_Base_Column_List"/>
	from pay_draw_cash_order pdco
	<include refid="common_query_condition"/>
</select>
<select id="findListForMap" parameterType="map" resultMap="DrawCashOrderMap">
	select
	<include refid="pdco_Base_Column_List"/>
	from pay_draw_cash_order pdco LEFT JOIN bas_user bu on pdco.user_id=bu.id
	<include refid="common_query_condition"/>
</select>
<sql id="common_query_condition">
	<where>
		<if test="id != null">
			pdco.id = #{id,jdbcType=DECIMAL}
		</if>
		<if test="status != null">
			and pdco.status = #{status,jdbcType=DECIMAL}
		</if>
		<if test="name != null">
			and bu.name like concat('%',#{name,jdbcType=VARCHAR},'%')
		</if>
		<if test="phone != null">
			and bu.phone like concat('%',#{phone,jdbcType=VARCHAR},'%')
		</if>
		<if test="createTimeStart != null">
			and pdco.create_time &gt;= #{createTimeStart,jdbcType=TIMESTAMP}
		</if>
		<if test="createTimeEnd != null">
			and pdco.create_time &lt;= #{createTimeEnd,jdbcType=TIMESTAMP}
		</if>
		<if test="payTimeStart != null">
			and pdco.pay_time &gt;= #{payTimeStart,jdbcType=TIMESTAMP}
		</if>
		<if test="payTimeEnd != null">
			and pdco.pay_time &lt;= #{payTimeEnd,jdbcType=TIMESTAMP}
		</if>
	</where>
</sql>

	<select id="getTotalMoney" parameterType="map" resultType="java.util.Map" useCache="false">
		select IFNULL(sum(ACCOUNT_MONEY),0) as fee,IFNULL(sum(money),0) as totalMoney,count(1) as orderCount from pay_draw_cash_order
		<where>
			<if test="userId != null">
				user_id=#{userId,jdbcType=DECIMAL}
			</if>
			<if test="status != null">
				and status=#{status,jdbcType=DECIMAL}
			</if>
		</where>
	</select>
</mapper>
